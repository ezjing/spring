<?xml version="1.0" encoding="UTF-8"?>
<!--  mybatis 홈페이지 - 시작하기 - 매핑된 SQL 구문 살펴보기 - 전체 붙여넣기  --> 

<!--  DOCTYPE은 수정 X  -->
<!--  mybatis의 sql 쿼리문을 사용하기 위한 파일  -->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--  SQL문 수정해가며 사용  -->
<!--  자바 인터페이스와 연동 설정  -->
<!--  mapper : 자바 인터페이스 중 @Mapper 어노테이션이 사용된 인터페이스와 연동하는 태그  -->
<!--  namespace : 자바 인터페이스의 패키지명과 이름을 모두 입력하여 현재 xml 파일과 연동  -->
<!--  xml 파일은 현재 프로젝트의 내부 구조를 모르기 때문에(어떻게 패키지가 이뤄졌는지 인식할 수 없기 때문에) 패키지명까지 모두 입력해야 함  -->
<mapper namespace="com.bitc.board1.mapper.BoardMapper">
    <!--  실제 sql 쿼리문 입력  -->
    <!--  연동된 인터페이스에서 제공하는 메소드명과 동일한 id 속성명을 가지는 태그를 생성  -->
    <!--  태그는 select, insert, update, delete 를 사용함  -->
    <!--  해당 태그의 속성은 id, resultType, parameterType 를 사용함  -->
    <!--  id : 연동된 인터페이스에서 제공하는 메소드명과 동이랗게 입력, xml은 메소드 오버로딩이라는 개념이 없기 때문에 동일한 이름을 사용할 수 없음 ,오버로딩 불가(같은 이름 메소드 사용 불가)  -->
    <!--  resultType : select 쿼리문 사용 후 반환되는 결과 타입을 지정, 자바 클래스로 설정, 자바의 기본 데이터 타입(String, float, double..)은 그대로 사용 가능, 사용자가 생성한 DTO 클래스 타입인 패키지명까지 모두 입력  -->
    <!--  parameterType : 해당 태그를 실행 시 필요한 매개변수의 데이터 타입, 매개변수가 1개일 경우 해당 데이터 타입을 그대로 사용, 매개변수가 2개이면 HashMap 타입 사용(써보면 편리한 방법,그냥 DTO 클래스 만들어서 써도 됨), 매개변수가 3개 이상이면 DTO 클래스를 생성하여 해당 DTO 클래스 타입의 패키지명과 함께 입력  -->
    <select id="selectBoardList" resultType="com.bitc.board1.dto.BoardDto">
        SELECT
            board_idx, title, contents, create_id, create_dt, update_id, update_dt, hit_cnt
        FROM
            sboard
        WHERE
            deleted_yn = 'N'
        ORDER BY
            board_idx DESC
    </select>
</mapper>
