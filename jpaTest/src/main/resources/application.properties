# 포트 번호 설정
server.port=8080

# REST 방식 사용 시 통신 방식을  GET, POST, PUT, DELETE 사용할 수 있도록 설정
spring.mvc.hiddenmethod.filter.enabled=true

spring.datasource.hikari.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.hikari.jdbc-url=jdbc:mysql://localhost:3306/testdb?userUnicode=true&characterEncoding=utf-8&serverTimezone=UTC
spring.datasource.hikari.username=full505
spring.datasource.hikari.password=full505
# 쿼리 작동 테스트
spring.datasource.hikari.connection-test-query=SELECT 1

# 카멜 명명법 사용
mybatis.configuration.map-underscore-to-camel-case=true





# JPA (Java Persistence API 스프링프레임웤스에서 사용하는 기본 데이터 베이스를 활용하기 위한 API, 코틀린으로 따지자면 sqlLite인듯)
# 스프링프레임워크에서 사용하는 기본 ORM
# JPA는 각 기능의 동작이 어떻게 되어야 한다는 것을 정의한 기술 명세
# JPA를 구현한 프로그램 JPA 프로바이더라고 함
# 스프링에서 가장 많이 사용되는 JPA 프로바이더가 하이버네이트

# JPA 사용 설정

# 사용할 데이터 베이스 종류 설정
spring.jpa.database=mysql

# 데이버 베이스 엔진 종류 설정
# 현재 mysql에서는 DB 엔진을 InnoDB를 주로 사용함
# JPA에서 엔진 종류를 설정하지 않을 경우 MyISAM을 기본으로 선택함(MySQL5 버전 기준)
# MySQL5Dialect, MySQL5InnoDBDialect, MySQL57Dialect, MySQL8Dialect
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

# 아래 설정을 대신 사용하여 상세 설정이 가능함
#spring.jpa.properies.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
#spring.jpa.properties.hibernate.dialect.storage_engine=innodb

# JPA의 엔티티 연관관계를 바탕으로 자동으로 실행(데이터 베이스 테이블을 새로 생성)
# 실제 운영 환경에서는 반드시 false로 설정해야 함(true하면 데이터 베이스 안의 내용이 전부 날아감)
# ddl은 DB를 정의하는 명령어
spring.jpa.generate-ddl=true

# JPA를 통해서 데이터 베이스 테이블을 프로그램을 매번 실행 시 매번 자동으로 생성할지 여부 설정
# create : 테이블이 없을 경우 테이블 생성
# create-drop : 테이블이 없을 경우 테이블 생성, 프로그램 종료 시 테이블 삭제, 프로그램 테스트용
# validate : 프로그램 실행 시 @Entity로 지정한 클래스와 실제 데이터 베이스의 테이블이 정상적으로 매핑되어 있는지 확인, 정상이 아닐 경우 프로그램이 실행되지 않음
# update : 기존에 데이터 베이스 테이블이 존재하는 상태에서 @Entity로 지정한 클래스의 필드가 수정될 경우, 컬럼을 추가하거나 삭제함, 개발용 설정
# none : 아무것도 하지않음
spring.jpa.hibernate.ddl-auto=create

# JPA에 의해서 실행되는 sql문 출력
spring.jpa.show-sql=true

# 출력되는 sql을 사용자가 알아보기 쉽게 포현함
spring.jpa.properties.hibernate.format_sql=true

# JPA를 통해서 데이터 테이블에 데이터 추가 시 id값을 자동으로 생성할지 여부 설정
# MySql 사용 시 ai 옵션을 사용할 것이기 때문에 false로 설정(Oracle 같은 경우 ai가 없기 때문에 그때 true 하면 된다. idx가 자동으로 1씩 올라감)
# 스프링6(스프링부트 3) 부터 제거됨
#spring.jpa.hibernate.use-new-id-generator-mappings=false